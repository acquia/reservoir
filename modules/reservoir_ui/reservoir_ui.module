<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\HttpKernelInterface;

/**
 * Implements hook_help().
 */
function reservoir_ui_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.user.collection':
      return '<p>' . t('A user represents a human. Users can log in to Reservoir if they have the <q>Content administrator</q> or <q>Client developer</q> <a href=":role">role</a>. Otherwise, they can only perform actions via a <a href=":client">Client</a>', [':role' => Url::fromRoute('entity.user_role.collection'), ':client' => Url::fromRoute('entity.oauth2_client.collection')]) . '</p>';

    // @todo override the default help from user.module, but hook_help() doesn't allow overriding thisâ€¦
    //case 'user.admin_permissions':

    // @todo override the default help from user.module, but hook_help() doesn't allow overriding thisâ€¦
    //case 'entity.user_role.collection':

    case 'entity.oauth2_client.collection':
      return '<p>' . t('A client represents an app, native or web, that users can log in to and interact with the content in this Reservoir, via OAuth2 authentication.') . '</p>';

    case 'entity.oauth2_token.collection':
      return '<p>' . t('OAuth2 uses tokens to allow users to interact with content in this Reservoir via clients. Clients initially get an <code>access_token</code>, which is usable for a limited time. They use a <code>refresh_token</code> to refresh their <code>access_token</code>. This provides stronger security.') . '</p>';
  }
}

/**
 * Implements hook_page_attachments().
 */
function reservoir_ui_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'reservoir_ui/welcome';
  $page['#attached']['library'][] = 'reservoir_ui/fix-2886816';
  $page['#attached']['library'][] = 'reservoir_ui/fix-2887220';
}

function reservoir_ui_menu_local_actions_alter(&$local_actions) {
  $local_actions['node.type_add']['title'] = 'Add content model';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservoir_ui_form_node_type_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['submission']['preview_mode']['#access'] = new AccessResultForbidden();
  $form['display']['#access'] = new AccessResultForbidden();
}

function reservoir_ui_toolbar_alter(&$items) {
  $current_user = \Drupal::currentUser();

  unset($items['home']);

  $empty_item_cacheability = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
  ];

  if ($current_user->hasPermission('access content overview')) {
    $items['reservoir_content'] = array(
      '#type' => 'toolbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => t('Content'),
        '#url' => Url::fromRoute('<front>'),
        '#options' => [
          'set_active_class' => TRUE,
        ],
        '#attributes' => array(
          'class' => array('toolbar-icon', 'toolbar-icon-system-admin-content'),
        ),
      ),
      '#weight' => -35,
    );
  }
  else {
    $items['reservoir_content'] = $empty_item_cacheability;
  }

  if ($current_user->hasPermission('access openapi api docs')) {
    $items['reservoir_json_api'] = array(
      '#type' => 'toolbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => t('JSON API'),
        '#url' => Url::fromRoute('reservoir_ui.json_api'),
        '#options' => [
          'set_active_class' => TRUE,
        ],
        '#attributes' => array(
          'class' => array('toolbar-icon', 'toolbar-icon-system-modules-list'),
        ),
      ),
      '#weight' => -30,
    );
  }
  else {
    $items['reservoir_json_api'] = $empty_item_cacheability;
  }

  if ($current_user->hasPermission('use graphql voyager')) {
    $items['reservoir_graphql'] = array(
      '#type' => 'toolbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => t('GraphQL'),
        '#url' => Url::fromRoute('graphql_voyager.voyager'),
        '#options' => [
          'set_active_class' => TRUE,
        ],
        '#attributes' => array(
          'class' => array('toolbar-icon', 'toolbar-icon-system-modules-list'),
        ),
      ),
      '#weight' => -30,
    );
  }
  else {
    $items['reservoir_graphql'] = $empty_item_cacheability;
  }

  if ($current_user->hasPermission('administer content types')) {
    $items['reservoir_content_models'] = array(
      '#type' => 'toolbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => t('Content models'),
        '#url' => Url::fromRoute('entity.node_type.collection'),
        '#options' => [
          'set_active_class' => TRUE,
        ],
        '#attributes' => array(
          'class' => array('toolbar-icon', 'toolbar-icon-system-admin-structure'),
        ),
      ),
      '#weight' => -25,
    );
  }
  else {
    $items['reservoir_content_models'] = $empty_item_cacheability;
  }

  if ($current_user->hasPermission('administer users') || $current_user->hasPermission('administer simple_oauth entities')) {
    $items['reservoir_data_access'] = array(
      '#type' => 'toolbar_item',
      'tab' => array(
        '#type' => 'link',
        '#options' => [
          'set_active_class' => TRUE,
        ],
        '#title' => t('Access control'),
        '#url' => $current_user->hasPermission('administer users')
          ? Url::fromRoute('entity.user.collection')
          : Url::fromRoute('entity.oauth2_token.collection'),
        '#attributes' => array(
          'class' => array('toolbar-icon', 'toolbar-icon-entity-user-collection'),
        ),
      ),
      '#weight' => -20,
    );
  }
  else {
    $items['reservoir_data_access'] = $empty_item_cacheability;
  }

  if ($current_user->hasPermission('access administration pages')) {
    $items['reservoir_backend'] = array(
      '#type' => 'toolbar_item',
      'tab' => array(
        '#type' => 'link',
        '#title' => t('Manage back end'),
        '#url' => Url::fromRoute('user.page'),
        '#attributes' => array(
          'class' => array('toolbar-icon', 'toolbar-icon-menu'),
        ),
      ),
      'tray' => array(
        '#heading' => t('Back end management'),
        'user_links' => array(
          '#theme' => 'links__toolbar_reservoir_ui',
          '#links' => [
            'configuration' => [
              'title' => t('Configuration'),
              'url' => Url::fromRoute('system.admin_config'),
              'attributes' => [
                'class' => ['toolbar-icon', 'toolbar-icon-system-admin-config'],
              ],
            ],
            'reports' => [
              'title' => t('Reports'),
              'url' => Url::fromRoute('system.admin_reports'),
              'attributes' => [
                'class' => ['toolbar-icon', 'toolbar-icon-system-admin-reports'],
              ],
            ],
            'help' => [
              'title' => t('Help'),
              'url' => Url::fromRoute('help.main'),
              'attributes' => [
                'class' => ['toolbar-icon', 'toolbar-icon-help-main'],
              ],
            ],
          ],
          '#attributes' => array(
            'class' => array('toolbar-reservoir-ui'),
          ),
        ),
      ),
      '#weight' => -15,
    );
  }
  else {
    $items['reservoir_backend'] = $empty_item_cacheability;
  }

  unset($items['administration']);


}

function reservoir_ui_menu_links_discovered_alter(&$links) {
  unset($links['system.site_information_settings']);
  unset($links['block.admin_display']);
  unset($links['system.themes_page']);
  unset($links['filter.tips_all']);
  unset($links['entity.date_format.collection']);
  unset($links['views_ui.reports_plugins']);
  unset($links['system.rss_feeds_settings']);

  $links['system.admin_content']['title'] = t('Data');
  $links['system.admin_content']['description'] = t('Find and manage data.');
  $links['system.admin_structure']['title'] = t('Data modeling');
  $links['system.admin_structure']['description'] = t('Model data: content types, comment types, taxonomies â€¦');
  $links['system.modules_list']['parent'] = 'system.admin_config';


  $links['entity.user.collection']['weight'] = 3;
  $links['system.admin_config']['weight'] = 4;

  $links['filter.admin_overview']['parent'] = 'system.admin_structure';

  $links['system.admin_config']['title'] = t('Back end configuration');


  $links['entity.user.collection']['title'] = t('Access control');
  $links['user.admin_index']['title'] = t('Users');
}

/**
 * Implements hook_local_tasks_alter().
 */
function reservoir_ui_local_tasks_alter(&$local_tasks) {
  $local_tasks['entity.oauth2_client.collection']['title'] = 'ðŸ“± Clients';
  $local_tasks['entity.oauth2_client.collection']['base_route'] = 'entity.user.collection';
  $local_tasks['entity.oauth2_client.collection']['weight'] = 90;

  $local_tasks['entity.oauth2_token.collection']['title'] = 'ðŸ”‘ Tokens';
  $local_tasks['entity.oauth2_token.collection']['base_route'] = 'entity.user.collection';
  $local_tasks['entity.oauth2_token.collection']['weight'] = 100;

  $local_tasks['entity.user.collection']['title'] = 'ðŸ™‹ Users';
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * @todo Instead of this hack, override the route definition for entity.node.canonical, and specify a custom controller to use instead of NodeViewController. Alters are brittle. Then we perhaps could also list *every* field, without relying on an EntityViewDisplay?
 */
function reservoir_ui_node_view_alter(array &$build, NodeInterface $entity, EntityViewDisplayInterface $display) {
  // Retrieve JSON API representation of this node.
  $jsonapi_url = _reservoir_ui_get_node_jsonapi_url($entity);
  $response_body = _reservoir_ui_do_subrequest($jsonapi_url)->getContent();

  // Generate markup.
  $json = json_encode(json_decode($response_body), JSON_PRETTY_PRINT);
  $markup = <<<HTML
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
<p><a href="$jsonapi_url"><code>$jsonapi_url</code></a></p>
<pre class="prettyprint lang-js">$json</pre>
HTML;

  // Add to render array.
  $build['jsonapi_prefix'] = [
    '#weight' => -100000,
    '#prefix' => '<table class="node-html-and-jsonapi"><thead><tr><th>HTML representation</th><th>JSON API representation</th></tr></thead><tbody></tbody><tr><td>',
  ];
  $build['jsonapi'] = [
    '#weight' => 10000,
    '#prefix' => '</td><td><div class="node-jsonapi-preview">',
    '#suffix' => '</div></td></tr></tbody></table>',
    '#markup' => Markup::create($markup),
    '#attached' => [
      'library' => [
        'reservoir_ui/node-jsonapi-preview',
      ],
    ],
  ];
}

/**
 * Gets the individual JSON API URL for the given node.

 * @param \Drupal\node\NodeInterface $node
 *   A node.
 *
 * @return string
 *   The generated URL.
 */
function _reservoir_ui_get_node_jsonapi_url(NodeInterface $node) {
  return Url::fromRoute(sprintf('jsonapi.node--%s.individual', $node->bundle()), [
    'node' => $node->uuid(),
  ])->toString(TRUE)->getGeneratedUrl();
}

/**
 * Performs a subrequest.
 *
 * @param string $url
 *   The string to send a subrequest to.
 *
 * @return \Symfony\Component\HttpFoundation\Response
 *   The response.
 */
function _reservoir_ui_do_subrequest($url) {
  // Create a subrequest.
  $request = \Drupal::request();
  $subrequest = Request::create($url, 'GET', $request->query->all(), $request->cookies->all(), [], $request->server->all());
  if ($session = $request->getSession()) {
    $subrequest->setSession($session);
  }

  // Execute the subrequest.
  $response = \Drupal::service('http_kernel')->handle($subrequest, HttpKernelInterface::SUB_REQUEST);
  // @todo Remove this when https://www.drupal.org/node/2613044 lands.
  \Drupal::requestStack()->pop();

  return $response;
}

/**
 * Implements hook_entity_type_alter().
 */
function reservoir_ui_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['oauth2_client']->setLinkTemplate('canonical', '/client/{oauth2_client}');

  // The System module provides the "Action" and "Menu" entity types, which
  // Reservoir does not use at all. Remove them altogether: smaller API surface.
  // @todo Because user_user_role_insert() assumes Action exists, it cannot be disabled.
//  unset($entity_types['action']);
  unset($entity_types['menu']);
}

/**
 * Implements hook_form_alter().
 */
function reservoir_ui_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'oauth2_client_add_form' || $form_id === 'oauth2_client_edit_form') {
    // Unset the two reserved Reservoir UI roles.
    unset($form['roles']['widget']['#options']['content_administrator']);
    unset($form['roles']['widget']['#options']['client_developer']);
    if (empty($form['roles']['widget']['#options'])) {
      unset($form['roles']['widget']);
    }

    $recommendation_text = t('Create a <a href=":tour">role</a> for every logical group of permissions you want to assign to a client.', [
      ':tour' => Url::fromRoute('entity.user_role.collection')
        ->setOption('query', ['tour' => TRUE])
        ->toString()
    ]);

    $form['roles']['widget']['#description'] .= '<br>' . $recommendation_text;

    if ($form_id === 'oauth2_client_add_form' && empty($form['roles']['widget']['#options'])) {
      drupal_set_message($recommendation_text, 'error');
      $form['actions']['#disabled'] = TRUE;
    }
  }
}
